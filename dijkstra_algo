#include <iostream>
#include <queue>
#include <vector>
using namespace std;

void dijkstra(vector<pair<int, int>>adjList[], int src, int num_nodes, int edges)
{
    vector<int> distArr(num_nodes, 1e9);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    distArr[src] = 0;
    pq.push({0, src});

    while(!pq.empty())
    {
        auto it = pq.top();
        pq.pop();
        int currDist = it.first;
        int currNode = it.second;

        for(auto it : adjList[currNode])
        {
            int neighbour = it.first;
            int edgeWT = it.second;
            int newDist = currDist + edgeWT;

            if(newDist < distArr[neighbour])
            {
                distArr[neighbour] = newDist;
                pq.push({newDist, neighbour});
            }
        }
    }

    cout << "Src-dst Distance: " << endl;
    for (int i = 0; i < num_nodes; i++)
    {
        if(distArr[i] == 1e9)
            cout << " { " << src << "," << i << " } --> " << -1 << endl;
        else
            cout << " { " << src << "," << i << " } --> " << distArr[i] << endl;
    }
}

    int main()
{
    int num_nodes, edges;
    cout << "Enter no. of nodes and edges: " << endl;
    cin >> num_nodes >> edges;

    vector<pair<int, int>> adjList[num_nodes];

    for (int i = 0; i < edges; i++)
    {
        int src, dst, wt;
        cout << "Enter src, dst and wt: " << endl;
        cin >> src >> dst >> wt;

        adjList[src].push_back(make_pair(dst, wt));
    }

    //graph printing
    int dst, wt;
    for (int i = 0; i < num_nodes; i++)
    {
        cout << i << " --> ";

        for(auto it : adjList[i])
        {
            dst = it.first;
            wt = it.second;

            cout << "{ " << dst << "," << wt << " }";
        }
        cout << "\n";
    }

    int src;
    cout << "Enter src: " << endl;
    cin >> src;

    dijkstra(adjList, src, num_nodes, edges);

    return 0;
}
