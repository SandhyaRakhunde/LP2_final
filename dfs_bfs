#include <iostream>
#include <stack>
#include <queue>
#include <vector>
using namespace std;

const int N = 1e5 + 2;
bool vis[N];        // array to mark visited node
vector<int> adj[N]; // adjacency list

void dfs(int node)
{
    vis[node] = 1; // marking node as visited
    cout << node << " ";

    for (auto it : adj[node])
    {
        if (vis[it] != 1)
            dfs(it); 
    }
}

void bfs(queue<int> &q)
{
    if (q.empty())
    {
        return;
    }

    int node = q.front();
    q.pop();
    cout << node << " "; // printing visited node

    for (auto it : adj[node]) // pushing all the nodes connected to front node
    {
        if (vis[it] != 1)
        {
            vis[it] = 1;
            q.push(it);
        }
    }
    bfs(q);
}

int main()
{
    int v, e; // vertises and edges
    cout << "Enter no. of nodes and edges: " << endl;
    cin >> v >> e;

    for (int i = 0; i <= v; i++) // initially all nodes are unvisited
        vis[i] = false;

    cout << "Enter source and destination of each edge: " << endl;
    int src, dst;
    for (int i = 0; i < e; i++) // storing all connected nodes edgewise
    {
        cin >> src >> dst;

        adj[src].push_back(dst);
        adj[dst].push_back(src);
    }

    queue<int> q; 
    cout << "BFS Traversal: " << endl;
    for (int i = 0; i < v; i++)
    {
        if (vis[i] == 0)
        {
            vis[i] = 1;
            q.push(i);
            bfs(q);
        }
    }

    for (int i = 0; i <= v; i++) // initially all nodes are unvisited
        vis[i] = false;
    cout << endl;

    cout << "DFS Traversal: " << endl;
    dfs(0);

    return 0;
}

// Output
//  Enter no. of nodes and edges:
//  5 6
//  Enter source and destination of each edge:
//  0 1
//  0 2
//  1 2
//  1 3
//  3 4
//  2 4
//  BFS Traversal:
//  0 1 2 3 4
//  DFS Traversal:
//  0 1 2 4 3
